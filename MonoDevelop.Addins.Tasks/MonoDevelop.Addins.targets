<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <UsingTask TaskName="MonoDevelop.Addins.Tasks.ResolveMonoDevelopAddins" AssemblyFile="MonoDevelop.Addins.Tasks.dll" />
  <UsingTask TaskName="MonoDevelop.Addins.Tasks.GetDefaultMonoDevelopLocations" AssemblyFile="MonoDevelop.Addins.Tasks.dll" />
  <UsingTask TaskName="MonoDevelop.Addins.Tasks.GenerateDependencyAttributes" AssemblyFile="MonoDevelop.Addins.Tasks.dll" />
  <UsingTask TaskName="MonoDevelop.Addins.Tasks.CollectOutputFiles" AssemblyFile="MonoDevelop.Addins.Tasks.dll" />
  <UsingTask TaskName="MonoDevelop.Addins.Tasks.CreatePackage" AssemblyFile="MonoDevelop.Addins.Tasks.dll" />
  <!--
  TODO:
  * the Addin Maker addin should set MDBinDir so it can target custom MD version
  * support downloading missing dependencies
  -->
  <PropertyGroup>
    <MDProfileVersion Condition="'$(MDProfileVersion)' == ''">5.0</MDProfileVersion>
    <MDProfilePath Condition="'$(MDProfilePath)' == ''">$(MONODEVELOP_TEST_PROFILE)</MDProfilePath>
  </PropertyGroup>

  <PropertyGroup Condition="'$(InstallAddin)'=='True'">
    <BuildDependsOn>$(BuildDependsOn);_CoreCreatePackage;_CoreInstallAddin</BuildDependsOn>
  </PropertyGroup>

  <PropertyGroup Condition="'$(CreatePackage)'=='True'">
    <BuildDependsOn>$(BuildDependsOn);_CoreCreatePackage</BuildDependsOn>
  </PropertyGroup>

  <!-- always reference the core addins and assemblies -->
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Core" />
    <Reference Include="System.Xml" />
    <AddinReference Include="MonoDevelop.Core"/>
    <AddinReference Include="MonoDevelop.Ide" />
    <Reference Include="Mono.Addins">
        <Private>False</Private>
    </Reference>
    <Reference Include="Mono.Debugging">
        <Private>False</Private>
    </Reference>
    <Reference Include="Mono.TextEditor">
        <Private>False</Private>
    </Reference>
    <Reference Include="Mono.Cairo">
        <Private>False</Private>
    </Reference>
    <Reference Include="ICSharpCode.NRefactory">
        <Private>False</Private>
    </Reference>
    <Reference Include="ICSharpCode.NRefactory.CSharp">
        <Private>False</Private>
    </Reference>
    <Reference Include="gtk-sharp">
        <Private>False</Private>
    </Reference>
    <Reference Include="atk-sharp">
        <Private>False</Private>
    </Reference>
    <Reference Include="glib-sharp">
        <Private>False</Private>
    </Reference>
    <Reference Include="gdk-sharp">
        <Private>False</Private>
    </Reference>
    <Reference Include="pango-sharp">
        <Private>False</Private>
    </Reference>
    <Reference Include="Xwt">
        <Private>False</Private>
    </Reference>
    <Reference Include="IKVM.Reflection">
        <Private>False</Private>
    </Reference>
    <Reference Include="Newtonsoft.Json">
        <Private>False</Private>
    </Reference>
  </ItemGroup>

  <PropertyGroup>
    <!-- FIXME logically this should be ResolveReferencesDependsOn but XS currently uses ResolveAssemblyReferences -->
    <ResolveAssemblyReferencesDependsOn>
      _MDResolveAddinReferences;
      $(ResolveAssemblyReferencesDependsOn)
    </ResolveAssemblyReferencesDependsOn>
  </PropertyGroup>

  <Target Name="ResolveMonoDevelopLocations">
    <GetDefaultMonoDevelopLocations ProfileVersion="$(MDProfileVersion)" ProfilePath="$(MDProfilePath)" ReferencePath="$(ReferencePath)">
      <Output TaskParameter="ConfigDir"   PropertyName="MDConfigDir"   Condition="'$(MDConfigDir)' == ''"    />
      <Output TaskParameter="AddinsDir"   PropertyName="MDAddinsDir"   Condition="'$(MDAddinsDir)' == ''"    />
      <Output TaskParameter="BinDir" PropertyName="MDBinDir" Condition="'$(MDBinDir)' == ''"  />
    </GetDefaultMonoDevelopLocations>

    <Message Text = "MDConfigDir:   $(MDConfigDir)" />
    <Message Text = "MDAddinsDir:   $(MDAddinsDir)" />
    <Message Text = "MDBinDir:      $(MDBinDir)" />

    <PropertyGroup>
      <MDToolExe>$(MDBinDir)\mdtool.exe</MDToolExe>
      <_MDToolCommand>"$(MDToolExe)"</_MDToolCommand>
      <_MDToolCommand Condition="'$(OS)'=='Unix'">mono "$(MDToolExe)"</_MDToolCommand>
    </PropertyGroup>

    <Error Text = "Bin directory not found: $(MDBinDir)" Condition="!Exists('$(MDToolExe)')" />

    <PropertyGroup>  
      <AssemblySearchPaths>$(MDBinDir);$(AssemblySearchPaths)</AssemblySearchPaths>
      <MDDatabaseDir>$(IntermediateOutputPath)mdam\db</MDDatabaseDir>
      <MDConfigDir Condition="'$(MDConfigDir)'==''">$(IntermediateOutputPath)mdam\config</MDConfigDir>
      <MDAddinsDir Condition="'$(MDAddinsDir)'==''">$(IntermediateOutputPath)mdam\addins</MDAddinsDir>
    </PropertyGroup>
  </Target>
  
  <Target Name="_MDResolveAddinReferences" DependsOnTargets="ResolveMonoDevelopLocations">
    <ResolveMonoDevelopAddins
      ConfigDir="$(MDConfigDir)"
      AddinsDir="$(MDAddinsDir)"
      DatabaseDir="$(MDDatabaseDir)"
      BinDir="$(MDBinDir)"
      AddinReferences="@(AddinReference)"
    >
      <Output TaskParameter="AssemblyReferences" ItemName ="Reference" />
      <Output TaskParameter="AssemblyReferences" ItemName ="_MDResolvedAddinAssemblies" />
      <Output TaskParameter="ResolvedAddins" ItemName ="_MDResolvedAddins" />
      <Output TaskParameter="VersionDefines" PropertyName ="_MDVersionDefines" />
    </ResolveMonoDevelopAddins>
    <PropertyGroup>
      <DefineConstants>$(DefineConstants);$(_MDVersionDefines)</DefineConstants>
    </PropertyGroup>
  </Target>

  <Target Name="_CoreCreatePackage">
    <PropertyGroup>
      <HasCustomAddinOutputPath Condition=" '$(AddinOutputPath)' !='' ">true</HasCustomAddinOutputPath>
      <AddinOutDir Condition=" '$(AddinOutDir)' == '' ">$(AddinOutputPath)</AddinOutDir>
      <AddinOutDir Condition=" '$(AddinOutDir)' == '' ">$(OutDir)</AddinOutDir>
      <AddinOutDir Condition="'$(AddinOutDir)' != '' and !HasTrailingSlash('$(AddinOutDir)')">$(AddinOutDir)\</AddinOutDir>
    </PropertyGroup>

    <ItemGroup>
      <_AddinOutDirItem Include="$(AddinOutDir)" />
    </ItemGroup>

    <PropertyGroup>
      <AddinTargetPath Condition=" '$(AddinTargetPath)' == '' and '$(HasCustomAddinOutputPath)' == 'true'">@(_AddinOutDirItem->'%(FullPath)\$(TargetFileName)')</AddinTargetPath>
      <AddinTargetPath Condition=" '$(AddinTargetPath)' == ''">$(TargetPath)</AddinTargetPath>
    </PropertyGroup>

    <CreatePackage
      ConfigDir="$(MDConfigDir)"
      AddinsDir="$(MDAddinsDir)"
      DatabaseDir="$(MDDatabaseDir)"
      BinDir="$(MDBinDir)"
      OutputDir="$(AddinOutDir)"
      AddinFile="$(AddinTargetPath)">
          <Output TaskParameter="PackageFile" PropertyName="PackageFile" />
      </CreatePackage>
    <!-- HACK: re-pack the addin since files packed directly by Mono.Addins can't
    be loaded by XS since it uses a different SharpZipLib version.
    We also have to rebuild the registry first or it will sometimes fail with
    a cryptic "Could not read add-in description" message. This might be something
    to do with a using a registry that was built from an sh environemnt?
    -->
    <Exec Command='$(_MDToolCommand) setup rgb' />
    <Exec Command='$(_MDToolCommand) setup pack "-d:$(AddinOutDir)." "$(AddinTargetPath)"' />
  </Target>

  <Target Name="_CoreInstallAddin">
    <!-- xbuild doesn't support StandardOutputImportance="Low" -->
    <Exec Command='$(_MDToolCommand) setup install -y "$(PackageFile)"' />
  </Target>

  <Target Name="InstallAddin" DependsOnTargets="CreatePackage;_CoreInstallAddin" />

  <Target Name="PackageAddin" DependsOnTargets="Build;_CoreCreatePackage" />

  <PropertyGroup>
    <BuildDependsOn>
      _MDCollectGeneratedCode;
      $(BuildDependsOn)
    </BuildDependsOn>
  </PropertyGroup>

  <PropertyGroup>
    <_MDAddinDepsFile>$(IntermediateOutputPath)MonoDevelop-Addin-Deps.g$(DefaultLanguageSourceExtension)</_MDAddinDepsFile>
    <_MDAddinFilesManifest>$(IntermediateOutputPath)_AddinFiles.addin.xml</_MDAddinFilesManifest>
  </PropertyGroup>

  <Target Name="_MDCollectGeneratedCode" DependsOnTargets="_MDGenerateDependencyAttributes;_MDGenerateFilesManifest">
    <ItemGroup>
      <Compile Include="$(_MDAddinDepsFile)" />
      <EmbeddedResource Include="$(_MDAddinFilesManifest)">
        <LogicalName>_AddinFiles.addin.xml</LogicalName>
      </EmbeddedResource>
      <FileWrites Include="$(_MDAddinDepsFile);$(_MDAddinFilesManifest)" />
    </ItemGroup>
  </Target>

  <Target Name="_MDGenerateDependencyAttributes" Inputs="$(MSBuildProjectFile);@(_MDResolvedAddins->'%(AddinFile)')" Outputs="$(_MDAddinDepsFile)" DependsOnTargets="_MDResolveAddinReferences">
    <GenerateDependencyAttributes
      AddinReferences="@(_MDResolvedAddins)"
      Filename="$(_MDAddinDepsFile)"
      Language="$(Language)"
    />
  </Target>

  <Target Name="_MDGenerateFilesManifest">
    <CollectOutputFiles ManifestFile="$(_MDAddinFilesManifest)" AddinFiles="@(AddinFile)">
      <Output TaskParameter="AddinFilesWithLinkMetadata" ItemName ="_AddinFilesWithLinkMetadata" />
    </CollectOutputFiles>
    <Copy SkipUnchangedFiles="True" SourceFiles="@(_AddinFilesWithLinkMetadata)" DestinationFiles="@(_AddinFilesWithLinkMetadata->'$(OutputPath)%(Link)')" />
    <ItemGroup>
      <FileWrites Include="@(_AddinFilesWithLinkMetadata->'$(OutputPath)%(Link)')" />
    </ItemGroup>
  </Target>
</Project>
